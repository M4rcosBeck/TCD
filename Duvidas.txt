Exercicio 01
Questão 1 – (1,0 ponto) Com relação ao sistema operacional Linux, analise as assertivas abaixo.
I. A função fork cria um processo-filho que se diferencia a partir do processo-pai somente em sua
variável de retorno e na memória alocada.
II. A função fork, em caso de sucesso, devolve o ID do processo filho no pai e 0 (zero) é retornado
no filho.
III. A função fork, quando não é executada com sucesso, retorna -1 para o processo-pai, nenhum
processo filho será criado e a mensagem de erro adequada será emitida.
É correto o que se afirma em:
a) I, apenas b) II, apenas c) I e III, apenas d)I, II e III e) I e II, apenas



Como criar um erro no fork?
I?






#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main(){
  pid_t filho;
  int i, status;

  filho = fork();

  if(filho == 0){ //processo do filho
    printf("Sou o processo filho\n");
    for(i = 0; i < 5; i++){
      printf("%d\n", i);
      sleep(2);
    }
    
    //finaliza o processo
    _exit(0);
    
  }else{ //processo do pai
    //espera pelo processo x, apontando no ponteiro y, tempo 0
    wait(filho, &status, 0);
    printf("Sou o pai. Agora posso executar o meu código.\n");
  }

  return 0;
}

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>

int main(){
  pid_t x = 0; 
  pid_t y = 1;
  
  x = fork();
  printf("Criando um novo processo para X. Seu valor atual é de %i\n", x);
  
  if (x == 0){
    printf("X é igual a 0. Criando um processo para Y.\n");
    y = fork();
    printf("Um novo processo foi criado.\n");
    printf("Criando um novo processo.\n");
    fork();
  }
  
  if (y == 0){
    printf("Y é igual a 0. Criando um novo processo!\n");
    fork();
    printf("programação paralela \n");
  }

  printf("O valor de X é %i\n", x);
  printf("O valor de Y é %i\n", y);
  
  return 0;
}

https://replit.com/languages/c